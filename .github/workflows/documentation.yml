---
name: Update Client Documentation

on:
    push:
        branches:
            - micla_testing
            - main

jobs:
    update_documentation:
        runs-on: ${{ matrix.os }}
        strategy:
            matrix:
                os:
                    - ubuntu-latest
                python-version:
                    - 3.8
            fail-fast: false
        defaults:
            run:
                working-directory: docs

        steps:
            - uses: actions/checkout@v3
              with:
                  fetch-depth: 2

            - name: Set up Python ${{ matrix.python-version }}
              uses: actions/setup-python@v1
              with:
                  python-version: ${{ matrix.python-version }}

# TODO: configure your own github account
            
            - name: Git login
              run: |
                  git config --global user.email "micol.giannelli@outlook.com"
                  git config --global user.name "MicolGiannelli19"

# understand what this does and set your python env between this and the next step 
            - name: Update pip
              run: |
                  python -m ensurepip
                  python -m pip install --upgrade pip

            - name: Configure python env
              run: |
                  python -m venv venv
                  source venv/bin/activate

            - name: installing pdoc and checking
              run: |
                  pip install pdoc
                  pdoc --version
                        
            # - name: installing mkdocs and checking
            #   run: |
            #       pip install mkdocs
            #       mkdocs --version

            - name: Set up cache
              uses: actions/cache@v2
              id: cache
              with:
                  path: .venv
                  key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}-${{ hashFiles('**/pyproject.toml') }}

            - name: Display Python version
              run: python -c "import sys; print(sys.version)"

            - name: running a python file that updates the python documentation
              run: |
                  python make.py
            
            - name: check 1
              run: |
                  pwd
                  ls

# run the python file 
            - name: create markdown files
              run: pwd                
# currently we are not using any of the github secret stuff
            # - name: Debug GitHub Token
            #   run: echo ${{secrets.GITHUB_TOKEN}}
                                   
          # run mkdocs yml
            - name: adding and committing
              run: |
                  git add . 
                  git commit --allow-empty -am "update documentation"
                  git push

              
            - name: switching to the docs branch
              run: |
                  git fetch
                  git checkout docs15
                  ls
            
            - name: Updating changes into docs_deployment branch
              run: |
                  cd ..
                  git checkout micla_testing -- docs
                  ls docs

            - name: saving the new changes in docs_deployment branch remotely
              run: |
                  git add . 
                  git commit --allow-empty -am "doc branch commit"
                  git push

#             # figure out what branch I want to push to and what I want to push 
#             - name: Pushing to git hub
#               uses: ad-m/github-push-action@master
#               with:
# # this is the git hub api token that should be updated in the github secrets when it expires
# # I need to change this secret  
# # Something missing do I need to somehow write the name of the repo 
#                   github_token: ${{secrets.GITHUB_TOKEN}}
#                   branch: ${{ github.ref }}



            #This is old command that created the documentation with a terminal command I will keep it just in case we change somehting 
            # name: pdoc documentation generation
            # run: python -m poetry run pdoc -t ../../docs/custom-template twinlab !twinlab.settings -o ../../docs/docs/Python

